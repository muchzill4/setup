-- Ident and line wrapping
vim.opt.expandtab = true
local indent = 2
vim.opt.shiftwidth = indent
vim.opt.tabstop = indent
vim.opt.breakindent = true
vim.opt.linebreak = true
vim.opt.showbreak = "↪ "

-- Clipboard
vim.opt.clipboard = "unnamed"

-- Search and replace
vim.opt.hlsearch = true
vim.opt.ignorecase = true
vim.opt.smartcase = true
vim.opt.inccommand = "split"

-- Mouse only in visual and normal
vim.opt.mouse = "nv"

-- Keep N lines above and below cursor
vim.opt.scrolloff = 4

-- Split below and to the right
vim.opt.splitbelow = true
vim.opt.splitright = true

-- Read tags generated by git hook
vim.opt.tags:append { ".git/tags" }

-- Whitespace
vim.opt.list = true
vim.opt.listchars = { tab = "» ", trail = "·", nbsp = "␣" }

-- Decrease update time
vim.opt.updatetime = 250
vim.opt.timeoutlen = 300

-- Record undo stack
vim.opt.undofile = true

-- Hint when line is too long
vim.opt.textwidth = 100
vim.opt.colorcolumn = "+1"

-- Hybrid line numbers
vim.opt.number = true
vim.opt.relativenumber = true

-- Always display sign column, so that it doesn't jump
vim.opt.signcolumn = "yes"

-- Folds
vim.opt.foldexpr = "v:lua.vim.treesitter.foldexpr()"
vim.opt.foldtext = ""
vim.opt.foldmethod = "expr"
vim.opt.foldenable = false -- `zi` to toggle

-- Completion (TODO: can't remember what this does exactly)
vim.opt.completeopt = "menu,menuone,noselect"

-- Wildmenu (TODO: can't remember what this does exactly)
vim.opt.wildmode = "longest:full,full"

-- Allow project specific config
vim.opt.exrc = true

-- Highlight on yank
vim.api.nvim_create_autocmd("TextYankPost", {
  group = vim.api.nvim_create_augroup("HighlightOnYank", {}),
  pattern = "*",
  callback = function() vim.highlight.on_yank() end,
})

-- Scale splits when resizing terminal
vim.api.nvim_create_autocmd("VimResized", {
  group = vim.api.nvim_create_augroup("ResizeSplitsOnWinResize", {}),
  pattern = "*",
  command = "wincmd =",
})

-- Cursorline only in active buffer stolen from TJ
vim.opt.cursorline = true -- Highlight the current line
local set_cursorline_group = vim.api.nvim_create_augroup("CursorLineControl", {})
local set_cursorline = function(event, value)
  vim.api.nvim_create_autocmd(event, {
    group = set_cursorline_group,
    callback = function() vim.opt_local.cursorline = value end,
  })
end
set_cursorline("WinLeave", false)
set_cursorline("WinEnter", true)

-- No line numbers, start terminal in insert mode
vim.api.nvim_create_autocmd({ "BufEnter", "WinEnter", "TermOpen" }, {
  group = vim.api.nvim_create_augroup("TerminalTweaks", {}),
  pattern = "term://*",
  callback = function()
    vim.opt_local.number = false
    vim.opt_local.relativenumber = false
    vim.cmd.startinsert()
  end,
})
